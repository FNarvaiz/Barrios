<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(TargetDir)Newtonsoft.Json.dll" #>
<#@ assembly name="$(TargetDir)Serenity.Core.dll" #>
<#@ assembly name="$(TargetDir)Serenity.Web.dll" #>
<#@ assembly name="$(TargetDir)Barrios.Web.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Serenity" #>
<#@ import namespace="Serenity.CodeGeneration" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ import namespace="System.IO" #>
<#@ include file="..\MultipleOutputHelper.ttinclude" #>
<#@ include file="..\CodeGenerationHelpers.ttinclude" #>
<#@ output extension=".log" #>
<#
    var solutionDir = Host.ResolvePath(@"..\..\..\..\");
    var webDir = Host.ResolvePath(@"..\..\");
    var webConfig = Path.Combine(webDir, "web.config");
    AppDomain.CurrentDomain.AssemblyResolve += new TemplateAssemblyResolver(webDir + @"bin\").Resolve;
    
    var generator = new ServerTypingsGenerator(typeof(Barrios.SiteInitialization).Assembly);
    generator.RootNamespaces.Add("Barrios");
    generator.LocalTexts = true;
    if (generator.LocalTexts && File.Exists(webConfig)) {
        var pkgEl = XElement.Parse(File.ReadAllText(webConfig)).Element("appSettings").Elements("add").Where(x => 
            x.Attribute("key") != null && x.Attribute("key").Value == "LocalTextPackages").FirstOrDefault();
        if (pkgEl != null && !string.IsNullOrWhiteSpace(pkgEl.Attribute("value").Value)) {
            var packages = JObject.Parse(pkgEl.Attribute("value").Value.Trim());
            if (packages != null)
            {
                foreach (var p in packages.PropertyValues())
                    foreach (var x in p.Values<string>())
                        generator.LocalTextFilters.Add(x);
            }
        }
    }

    var tsTypeLister = new TSTypeLister(webDir);
    var tsTypes = tsTypeLister.List();
    foreach (var type in tsTypes)
        generator.AddTSType(type);

    var codeByFilename = generator.Run();
    var manager = Manager.Create(Host, GenerationEnvironment);
    foreach (var pair in codeByFilename) 
    {
        manager.StartNewFile(pair.Key);
#>
<#=pair.Value#>
<# 
        manager.EndBlock(); 
    }

    manager.Process(true);

    if (manager.AnyChanges)
        new TypeScriptCompiler(webDir).Compile(webDir + @"Scripts\", "");
#>